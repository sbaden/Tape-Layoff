//#include "/Volumes/GFXM1/SCRIPTS/04\ COMMON/includedScripts.jsx"    function tapeLayoffStaging(movLocation){    if(app.project){        qeDOM();                var preset_path = "/Volumes/GFXM1/SCRIPTS/05 COMMON PPRO/PRESETS/DVCPROHD_NON_DROP.sqpreset";                var sequenceName = "Batch_Sequence";        var targetSequence = searchForProjItemWithName(sequenceName);                if(targetSequence === 0){            qe.project.newSequence(sequenceName, preset_path);            targetSequence = searchForProjItemWithName(sequenceName);        }        var activeSequence = qe.project.getActiveSequence();                var setSeqStart = 900115856640000;  // 900115856640000 ( 59 min )   ||  914456685542400 ( 1 hour )  ||  roughly  254016000000 / per sec        var mySequence = app.project.activeSequence;        mySequence.setZeroPoint(setSeqStart);                if(activeSequence != null){            var track = activeSequence.getVideoTrackAt(0);        }        else{ alert("There are no active sequences"); }         var resBinName = 'Resource Files';        var resBin = searchForProjItemWithName(resBinName);  // Bin containing bar & tone, X frames, etc                if (resBin === 0) {            app.project.rootItem.createBin(resBinName);            resBin = searchForProjItemWithName(resBinName);        }        resBin.select();  //  Script imports files into active Bin - This makes the Bin active.                    var projFilesLocation = "/Volumes/GFXM1/SCRIPTS/05 COMMON PPRO/RESOURCES/";        var folder = new Folder (projFilesLocation);        var filesArray = folder.getFiles();        getProjFiles(filesArray);                    qeDOM();        resBin = getBin(resBinName);                var barToneResName = "barsTone.mov";        var barTone = getBinItem (resBin, barToneResName);        var barToneInsertTime = '00:00:00:00';        track.insert(barTone, barToneInsertTime);                    batchBinName = 'Batch Files';  // Find or create a target bin.        var batchBin = searchForProjItemWithName(batchBinName);             if (batchBin === 0) {            app.project.rootItem.createBin(batchBinName);  //  Creates bin with batchBinName if one doesn't exist already            batchBin = searchForProjItemWithName(batchBinName);        }                 if (batchBin){            batchBin.select();  //  Script imports files into active Bin - This makes the Bin active.                   //var movLocation = Folder.selectDialog ("Choose folder containing files to import", 0, true);            var movfolder = new Folder (movLocation);            var filesArray = movfolder.getFiles("*.mov");            filesArray.sort(sortListItems);  //  Sort files in alphabetical order            getProjFiles(filesArray);                        qeDOM();            batchBin = getBin(batchBinName);                        resBin = getBin(resBinName);               var xFrameResName = "X_HD.mov";            var xFrame = getBinItem(resBin, xFrameResName);                        var hasXFrame = true;            var insertTime = '';                  if(hasXFrame){                insertTime = '00:00:59:28';  // Sets first insert point for clips.  This value ignores sequence start time (00:59:00:00) and counts from 00:00:00:00            }            else {                insertTime = '00:01:00:00';            }                        for (var c = 0; c < batchBin.numItems; c++){  // Loop through resBin and batchBin adding items to sequence                var currentItem = batchBin.getItemAt(c);                if (track != null){                    if(hasXFrame){                        track.insert(xFrame, insertTime);  //  Inserts frame of X and frame of black before each clip                        track.insert(currentItem, "CTI");                    }                    else {                        track.insert(currentItem, insertTime);  //  FOOTAGE BEING INSERTED AND THE SEQUENCE MUST HAVE MATCHING SETTINGS                    }                }                insertTime = 'CTI';                var time = activeSequence.CTI.timecode;  // gets the timecode at the end of the clip  ( '00;00;00;00' )                var dropFrame = ";";                var nonDropFrame = ":";                                insertTime = parseTimeCode(hasXFrame, nonDropFrame, time);                       }                } // end if(batchBin)    } // end if(app.project)}function qeDOM(){  //  Created this function because the qeDOM needs to be called multiple times throughtout script    app.enableQE();    qe.project.init();  //   The qe.project.init(); resets the proj every time!  ( FUCKING STUPID - FUCKING ADOBE )}function getProjFiles(filesArray){        var filesToImport = new Array;    for(i=0; i<filesArray.length; i++){        filesToImport.push(filesArray[i].fsName);  // .fsName appends the path of the file object to contain the entire path    }    app.project.importFiles(filesToImport);}function sortListItems(a, b){  //  Sort alphabetically    if (a.name.toLowerCase() < b.name.toLowerCase()){ return -1; }    else if (a.name.toLowerCase() > b.name.toLowerCase()){ return 1; }    else{ return 0; }}function getBin(binName){        for (var b = 0; b < qe.project.numBins; b++){        var currentBin = qe.project.getBinAt(b);        if (currentBin !== null) {            if (currentBin.name == binName){                return currentBin;            }        }    }}function getBinItem(bin, itemName){    for (var r = 0; r < bin.numItems; r++){        var currentItem = bin.getItemAt(r);        var str = currentItem.name.toUpperCase();        if (currentItem.name.toUpperCase() == itemName.toUpperCase()){            return currentItem;        }    }}    function searchForProjItemWithName(itemName) {    var numItemsAtRoot = app.project.rootItem.children.numItems;    var foundProjItem = 0;      for (var i = 0; i < numItemsAtRoot && foundProjItem == 0; i++) {        var currentItem = app.project.rootItem.children[i];          if (currentItem != null && currentItem.name == itemName) {            foundProjItem = currentItem;        }    }    return foundProjItem;}function parseTimeCode(hasXFrame, dropNonDrop, timeCode){    var time = timeCode.split(":");    var hour = parseInt(time[0]);    var min = parseInt(time[1]);    var sec = parseInt(time[2]);    var frm = parseInt(time[3]);    var buffer = 03;  //  Minimum num seconds between each clip    sec += buffer;  //  Adds 3 seconds onto the current time//~     if(frm > 29){//~         sec += Math.floor(frm / 30);//~         frm = frm % 30;//~     }    if(frm > 15){  //  If num frames is greater than 15 round up to nearest sec        sec += 1;        frm = 0;    }    else { frm = 0; }  //  Else round down to nearest sec.    if(!(sec % 5 === 0)){  //  Adjust insertTime to increments of 5 seconds        sec = Math.ceil(sec/5)*5;  //  Rounds to the next multiple of 5    }        if(hasXFrame){  //  Adjust time back 2 frames for X Frame and Black Frame - This will set the insert point for the clip on the correct frame (multiple of 5)        sec -= 1;        frm += 28;    }    if(sec > 59){        min += Math.floor(sec / 60);        sec = sec % 60;    }    if (min > 59){        hour += Math.floor(min / 60);        min = min % 60;    }    (hour < 10) ? hour = "0" + hour.toString() : hour.toString();    (min < 10) ? min = "0" + min.toString() : min.toString();    (sec < 10) ? sec = "0" + sec.toString() : sec.toString();    (frm < 10) ? frm = "0" + frm.toString() : frm.toString();    return (hour.toString() + dropNonDrop + min.toString() + dropNonDrop + sec.toString() + dropNonDrop + frm.toString());}